@model Employee

@{
    ViewData["Title"] = "Employee Dashboard";
    var hasError = !string.IsNullOrEmpty(ViewData["ErrorMessage"]?.ToString());
    var dashboardData = ViewBag.DashboardData as dynamic;
}

<div class="dashboard-container">
    <h1 class="page-title">Employee Dashboard</h1>
    
    @if (Model == null)
    {
        <div class="alert alert-warning" role="alert">
            Unable to load employee information. Please contact support.
        </div>
    }
    else
    {
        <div class="stats-grid">
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-box"></i>
                </div>
                <div class="stat-details">
                    <span class="stat-value" id="assignedItemsCount">@(dashboardData?.assignedItemsCount ?? 0)</span>
                    <span class="stat-label">Assigned Items</span>
                    <span class="stat-change positive" id="monthlyChange">+@(dashboardData?.thisMonthAssignments ?? 0) this month</span>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-clipboard-list"></i>
                </div>
                <div class="stat-details">
                    <span class="stat-value" id="pendingRequestsCount">@(dashboardData?.pendingRequestsCount ?? 0)</span>
                    <span class="stat-label">Pending Requests</span>
                    <span class="stat-change">This month</span>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-check-circle"></i>
                </div>
                <div class="stat-details">
                    <span class="stat-value" id="approvedRequestsCount">@(dashboardData?.approvedRequestsCount ?? 0)</span>
                    <span class="stat-label">Approved Requests</span>
                    <span class="stat-change approved">All time</span>
                </div>
            </div>
            <div class="stat-card">
                <div class="stat-icon">
                    <i class="fas fa-times-circle"></i>
                </div>
                <div class="stat-details">
                    <span class="stat-value" id="rejectedRequestsCount">@(dashboardData?.rejectedRequestsCount ?? 0)</span>
                    <span class="stat-label">Cancelled Requests</span>
                    <span class="stat-change negative">This month</span>
                </div>
            </div>
        </div>

        <div class="info-grid">
            <div class="info-card profile-card">
                <div class="profile-header">
                    <div class="employee-profile-image">
                        <img src="@(string.IsNullOrEmpty(Model.ImagePath) ? "/images/default-profile.png" : Model.ImagePath)" 
                             alt="Profile Picture"
                             onerror="this.src='/images/default-profile.png'">
                    </div>
                    <div class="profile-title">
                        <h3>@(Model.FirstName ?? "User") @(Model.LastName ?? "")</h3>
                        <span class="profile-position">@(Model.Position ?? "Employee")</span>
                    </div>
                    <div class="profile-actions">
                        <a href="@Url.Action("EditProfile", "Employee", new { id = Model.Id })" class="btn btn-primary">
                            <i class="fas fa-edit"></i> Edit Profile
                        </a>
                    </div>
                </div>
                <div class="profile-content">
                    <div class="profile-section">
                        <h4>Personal Information</h4>
                        <div class="info-item">
                            <span class="info-label">Employee ID</span>
                            <span class="info-value">@(Model.EmployeeId ?? "N/A")</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Email</span>
                            <span class="info-value">@(Model.Email ?? "N/A")</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Phone</span>
                            <span class="info-value">@(Model.Phone ?? "N/A")</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">NIC</span>
                            <span class="info-value">@(Model.NIC ?? "N/A")</span>
                        </div>
                    </div>
                    <div class="profile-section">
                        <h4>Work Information</h4>
                        <div class="info-item">
                            <span class="info-label">Department</span>
                            <span class="info-value">@(Model.Department?.Name ?? "N/A")</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Join Date</span>
                            <span class="info-value">@(Model.JoinDate.ToString("MMM dd, yyyy") ?? "N/A")</span>
                        </div>
                        <div class="info-item">
                            <span class="info-label">Status</span>
                            <span class="info-value @(Model.IsActive ? "status-active" : "status-inactive")">
                                @(Model.IsActive ? "Active" : "Inactive")
                            </span>
                        </div>
                    </div>
                </div>
            </div>
            <div class="info-card">
                <div class="info-header">
                    <h3><i class="fas fa-tshirt"></i> Uniforms</h3>
                    <a href="@Url.Action("AssignedItems", "Request")" class="btn-link">View All</a>
                </div>
                <div class="info-content">
                    <div class="info-item">
                        <span class="info-label">Assigned</span>
                        <span class="info-value" id="uniformsCount">@(dashboardData?.uniformsCount ?? 0) sets</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Available</span>
                        <span class="info-value">1 set</span>
                    </div>
                </div>
            </div>
            <div class="info-card">
                <div class="info-header">
                    <h3><i class="fas fa-tools"></i> Equipment</h3>
                    <a href="@Url.Action("AssignedItems", "Request")" class="btn-link">View All</a>
                </div>
                <div class="info-content">
                    <div class="info-item">
                        <span class="info-label">Assigned</span>
                        <span class="info-value" id="equipmentCount">@(dashboardData?.equipmentCount ?? 0) items</span>
                    </div>
                    <div class="info-item">
                        <span class="info-label">Under Maintenance</span>
                        <span class="info-value">0 items</span>
                    </div>
                </div>
            </div>
        </div>

        <div class="recent-activities">
            <div class="section-header">
                <h3>Recent Activities</h3>
                <div class="header-actions">
                    <span class="last-updated" id="lastUpdated">Last updated: @(dashboardData?.lastUpdated ?? "Loading...")</span>
                    <a href="@Url.Action("Index", "Request")" class="btn-link">View All</a>
                </div>
            </div>
            <div class="activity-list" id="activityList">
                <div class="loading-spinner">
                    <i class="fas fa-spinner fa-spin"></i> Loading activities...
                </div>
            </div>
        </div>
    }
</div>

<style>
    .dashboard-container {
        padding: 20px;
        margin: 0;
    }
    .page-title {
        font-size: 24px;
        font-weight: 500;
        color: #333;
        margin-bottom: 30px;
    }
    .stats-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }
    .stat-card {
        background: white;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        display: flex;
        align-items: center;
        gap: 20px;
        transition: transform 0.2s;
    }
    .stat-card:hover {
        transform: translateY(-5px);
    }
    .stat-icon {
        font-size: 2rem;
        color: #007bff;
        background: #f0f4ff;
        border-radius: 50%;
        width: 48px;
        height: 48px;
        display: flex;
        align-items: center;
        justify-content: center;
    }
    .stat-details {
        display: flex;
        flex-direction: column;
        gap: 2px;
    }
    .stat-value {
        font-size: 1.5rem;
        font-weight: bold;
        color: #333;
    }
    .stat-label {
        color: #666;
        font-size: 0.95rem;
    }
    .stat-change {
        font-size: 0.85rem;
        color: #888;
    }
    .stat-change.positive { color: #28a745; }
    .stat-change.negative { color: #dc3545; }
    .stat-change.approved { color: #007bff; }
    .stat-change.urgent { color: #ffc107; }
    .info-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 20px;
        margin-bottom: 30px;
    }
    .info-card {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 20px;
    }
    .profile-card {
        grid-column: 1 / -1;
    }
    .profile-header {
        display: flex;
        align-items: center;
        gap: 20px;
        margin-bottom: 20px;
        position: relative;
    }
    .employee-profile-image {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        overflow: hidden;
        margin-right: 20px;
    }
    .employee-profile-image img {
        width: 100%;
        height: 100%;
        object-fit: cover;
    }
    .profile-title {
        flex: 1;
    }
    .profile-title h3 {
        margin: 0;
        font-size: 1.5rem;
        color: #333;
    }
    .profile-position {
        color: #666;
        font-size: 1rem;
    }
    .profile-actions {
        position: absolute;
        top: 0;
        right: 0;
    }
    .profile-actions .btn-primary {
        padding: 8px 16px;
        background: #007bff;
        color: white;
        border-radius: 5px;
        text-decoration: none;
        display: flex;
        align-items: center;
        gap: 8px;
        transition: background-color 0.2s;
    }
    .profile-actions .btn-primary:hover {
        background: #0056b3;
        color: white;
        text-decoration: none;
    }
    .profile-content {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
        gap: 20px;
    }
    .profile-section h4 {
        color: #007bff;
        margin-bottom: 15px;
        font-size: 1.1rem;
    }
    .info-item {
        display: flex;
        justify-content: space-between;
        padding: 8px 0;
        border-bottom: 1px solid #f0f0f0;
    }
    .info-label {
        color: #666;
    }
    .info-value {
        color: #333;
        font-weight: 500;
    }
    .status-active {
        color: #28a745;
    }
    .status-inactive {
        color: #dc3545;
    }
    .recent-activities {
        background: white;
        border-radius: 10px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        padding: 20px;
        margin-bottom: 30px;
    }
    .section-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
    }
    .header-actions {
        display: flex;
        align-items: center;
        gap: 15px;
    }
    .last-updated {
        font-size: 0.85rem;
        color: #888;
        font-style: italic;
    }
    .btn-link {
        background: none;
        border: none;
        color: #007bff;
        cursor: pointer;
        font-size: 1rem;
        text-decoration: underline;
        padding: 0;
    }
    .activity-list {
        display: flex;
        flex-direction: column;
        gap: 15px;
    }
    .activity-item {
        display: flex;
        align-items: center;
        gap: 20px;
        padding: 10px 0;
        border-bottom: 1px solid #f0f0f0;
    }
    .activity-icon {
        font-size: 1.5rem;
        color: #007bff;
        width: 40px;
        text-align: center;
    }
    .activity-details {
        flex: 1;
        display: flex;
        flex-direction: column;
        gap: 2px;
    }
    .activity-title {
        font-weight: 500;
        color: #333;
    }
    .activity-desc {
        color: #666;
        font-size: 0.95rem;
    }
    .activity-time {
        color: #888;
        font-size: 0.85rem;
    }
    .activity-status {
        font-size: 0.95rem;
        font-weight: 500;
        padding: 4px 12px;
        border-radius: 12px;
        text-align: center;
    }
    .activity-status.pending { background: #fff3cd; color: #856404; }
    .activity-status.approved { background: #d4edda; color: #155724; }
    .activity-status.completed { background: #cce5ff; color: #004085; }
    .activity-status.negative { background: #f8d7da; color: #721c24; }
    .loading-spinner {
        text-align: center;
        padding: 20px;
        color: #666;
    }
    .loading-spinner i {
        margin-right: 10px;
    }
    .no-activities {
        text-align: center;
        padding: 20px;
        color: #666;
        font-style: italic;
    }
    .alert {
        padding: 15px;
        margin-bottom: 20px;
        border: 1px solid transparent;
        border-radius: 4px;
    }

    .alert-danger {
        color: #721c24;
        background-color: #f8d7da;
        border-color: #f5c6cb;
    }

    .alert-warning {
        color: #856404;
        background-color: #fff3cd;
        border-color: #ffeeba;
    }
</style>

@section Scripts {
    <script>
        // Real-time dashboard functionality
        let refreshInterval;
        let isRefreshing = false;

        // Initialize dashboard
        $(document).ready(function() {
            loadDashboardStats();
            loadRecentActivities();
            
            // Set up auto-refresh every 30 seconds
            refreshInterval = setInterval(function() {
                if (!isRefreshing) {
                    loadDashboardStats();
                    loadRecentActivities();
                }
            }, 30000); // 30 seconds
        });

        // Load dashboard statistics
        function loadDashboardStats() {
            isRefreshing = true;
            
            $.ajax({
                url: '@Url.Action("GetDashboardStats", "EmployeeDashboard")',
                type: 'GET',
                success: function(data) {
                    if (data.error) {
                        console.error('Error loading dashboard stats:', data.error);
                        return;
                    }
                    
                    // Update statistics
                    $('#assignedItemsCount').text(data.assignedItemsCount);
                    $('#pendingRequestsCount').text(data.pendingRequestsCount);
                    $('#approvedRequestsCount').text(data.approvedRequestsCount);
                    $('#rejectedRequestsCount').text(data.rejectedRequestsCount);
                    $('#uniformsCount').text(data.uniformsCount + ' sets');
                    $('#equipmentCount').text(data.equipmentCount + ' items');
                    $('#monthlyChange').text('+' + data.thisMonthAssignments + ' this month');
                    
                    // Update last updated time
                    $('#lastUpdated').text('Last updated: ' + data.lastUpdated);
                },
                error: function(xhr, status, error) {
                    console.error('Error loading dashboard stats:', error);
                },
                complete: function() {
                    isRefreshing = false;
                }
            });
        }

        // Load recent activities
        function loadRecentActivities() {
            $.ajax({
                url: '@Url.Action("GetRecentActivities", "EmployeeDashboard")',
                type: 'GET',
                success: function(data) {
                    if (data.error) {
                        console.error('Error loading recent activities:', data.error);
                        return;
                    }
                    
                    updateActivityList(data.activities);
                },
                error: function(xhr, status, error) {
                    console.error('Error loading recent activities:', error);
                }
            });
        }

        // Update activity list
        function updateActivityList(activities) {
            const activityList = $('#activityList');
            
            if (!activities || activities.length === 0) {
                activityList.html('<div class="no-activities">No recent activities found.</div>');
                return;
            }
            
            let html = '';
            activities.forEach(function(activity) {
                const icon = activity.type === 'Request' ? 'fa-clipboard-list' : 'fa-box';
                
                html += `
                    <div class="activity-item">
                        <div class="activity-icon">
                            <i class="fas ${icon}"></i>
                        </div>
                        <div class="activity-details">
                            <span class="activity-title">${activity.title}</span>
                            <span class="activity-desc">${activity.description}</span>
                            <span class="activity-time">${activity.timeAgo}</span>
                        </div>
                        <div class="activity-status ${activity.statusClass}">
                            ${activity.status}
                        </div>
                    </div>
                `;
            });
            
            activityList.html(html);
        }

        // Manual refresh function
        function refreshDashboard() {
            loadDashboardStats();
            loadRecentActivities();
        }

        // Clean up interval when page is unloaded
        $(window).on('beforeunload', function() {
            if (refreshInterval) {
                clearInterval(refreshInterval);
            }
        });
    </script>
} 